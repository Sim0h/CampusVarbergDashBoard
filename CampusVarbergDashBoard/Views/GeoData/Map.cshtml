@{
    ViewData["Title"] = "Heatmap";
}

<div class="dropdown-container">
    <div class="dropdown-item">
        <label for="ortDropdown"></label>
        <input type="text" id="ortDropdown" name="ortDropdown" aria-label="Ort" />
    </div>
    <div class="dropdown-item">
        <label for="postnummerDropdown"></label>
        <input type="text" id="postnummerDropdown" name="postnummerDropdown" aria-label="Postnummer" />
    </div>
    <div class="dropdown-item">
        <label for="colorSchemeDropdown"></label>
        <input type="text" id="colorSchemeDropdown" name="colorSchemeDropdown" aria-label="Färgtema" />
    </div>
    <div class="button-container">
        <button type="button" class="btn btn-primary" id="filter-btn">Filtrera</button>
    </div>
</div>

<div id="applicant-count" style="margin-top: 10px;">
    Antal sökande: <span id="antal-sokande">0</span>
</div>

<div id="map" style="height: 725px; width: 100%;" tabindex="0"></div>


<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://cdn.syncfusion.com/ej2/20.2.36/dist/ej2.min.js"></script>
<script src="https://unpkg.com/leaflet.heat/dist/leaflet-heat.js"></script>

<script>
    var jsonData = []; // To store all JSON data
    var ortDropdown, postnummerDropdown, colorSchemeDropdown;
    var currentFilteredData = [];

    // Initialize the map
    var map = L.map('map', {
        center: [61.0, 10.0],
        zoom: 5,
        maxBounds: [[83.0, -10.0], [53.0, 40.0]],
        maxBoundsViscosity: 1.0
    });

    // Add tile layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors',
        maxZoom: 18,
        minZoom: 5
    }).addTo(map);

    var heatmapLayer;

    function isValidOrt(ort) {
        // kontroll av giltigt ortnamn
        var validPattern = /^[a-zA-ZåäöÅÄÖ\s\-]+$/;
        return validPattern.test(ort) && ort.trim() !== '';
    }

    function updateHeatmap(points) {
        if (heatmapLayer) {
            map.removeLayer(heatmapLayer);
        }

        var selectedScheme = colorSchemeDropdown ? colorSchemeDropdown.value : 'standard';

        var gradient;

        switch (selectedScheme) {
            case 'blue':
                gradient = { 0.4: 'lightblue', 0.6: 'blue', 0.8: 'darkblue', 1: 'navy' };
                break;
            case 'greenRed':
                gradient = { 0.4: 'green', 0.6: 'yellow', 0.8: 'orange', 1: 'red' };
                break;
            case 'monochrome':
                gradient = { 0.4: '#ffffff', 0.6: '#aaaaaa', 0.8: '#555555', 1: '#000000' };
                break;
            default:
                gradient = { 0.4: 'blue', 0.6: 'cyan', 0.7: 'lime', 0.8: 'yellow', 1: 'red' };
        }

        if (points.length > 0) {
            heatmapLayer = L.heatLayer(points, {
                radius: 20,
                blur: 20,
                maxZoom: 10,
                gradient: gradient
            }).addTo(map);
        } else {
            console.warn('Heatmap-punkter saknas, heatmapen uppdateras inte');
        }
    }

    function updateApplicantCount(count) {
        document.getElementById('antal-sokande').textContent = count;
    }

    function populateDropdowns(data) {
        var orter = [...new Set(data.map(item => item.ort))];
        var postnummer = [...new Set(data.map(item => item.postnummer))];

        // Remove 'Okänd Ort' and empty strings
        orter = orter.filter(ort => ort !== 'Okänd Ort' && ort.trim() !== '');

        // Sort and add 'Alla Orter' and 'Okänd Ort'
        orter.sort((a, b) => a.localeCompare(b, 'sv', { sensitivity: 'base' }));
        orter.unshift('Alla Orter');
        orter.push('Okänd Ort');

        // Sort postnummer and handle 'Okänt Postnummer'
        postnummer = postnummer.filter(pn => pn !== 'Okänt Postnummer');
        postnummer.sort((a, b) => a.localeCompare(b, 'sv', { numeric: true }));
        postnummer.unshift('Alla Postnummer');
        postnummer.push('Okänt Postnummer');

        // Initialize or update ortDropdown
        if (!ortDropdown) {
            ortDropdown = new ej.dropdowns.DropDownList({
                placeholder: 'Välj Ort',
                dataSource: orter,
                allowFiltering: true,
                popupHeight: '200px',
                change: function () {
                    updatePostnummerDropdown();
                }
            });
            ortDropdown.appendTo('#ortDropdown');
        } else {
            ortDropdown.dataSource = orter;
            ortDropdown.dataBind();
        }

        // Initialize or update postnummerDropdown
        if (!postnummerDropdown) {
            postnummerDropdown = new ej.dropdowns.DropDownList({
                placeholder: 'Välj Postnummer',
                dataSource: postnummer,
                allowFiltering: true,
                popupHeight: '200px'
            });
            postnummerDropdown.appendTo('#postnummerDropdown');
        } else {
            postnummerDropdown.dataSource = postnummer;
            postnummerDropdown.dataBind();
        }
    }

    function updatePostnummerDropdown() {
        var selectedOrt = ortDropdown.value;

        var filteredPostnummer = jsonData
            .filter(item => selectedOrt === 'Alla Orter' || item.ort === selectedOrt)
            .map(item => item.postnummer);

        filteredPostnummer = [...new Set(filteredPostnummer)];

        // Sort and handle 'Okänt Postnummer'
        filteredPostnummer = filteredPostnummer.filter(pn => pn !== 'Okänt Postnummer');
        filteredPostnummer.sort((a, b) => a.localeCompare(b, 'sv', { numeric: true }));
        filteredPostnummer.unshift('Alla Postnummer');
        filteredPostnummer.push('Okänt Postnummer');

        postnummerDropdown.dataSource = filteredPostnummer;
        postnummerDropdown.value = 'Alla Postnummer';
        postnummerDropdown.dataBind();
    }

    function populateColorSchemes() {
        var colorSchemes = [
            { text: 'Standard', value: 'standard' },
            { text: 'Blå Toner', value: 'blue' },
            { text: 'Grön till Röd', value: 'greenRed' },
            { text: 'Monokrom', value: 'monochrome' }
        ];

        colorSchemeDropdown = new ej.dropdowns.DropDownList({
            placeholder: 'Välj Färgtema',
            dataSource: colorSchemes,
            fields: { text: 'text', value: 'value' },
            value: 'standard',
            change: function () {
                updateHeatmapWithSelectedColorScheme();
            }
        });
        colorSchemeDropdown.appendTo('#colorSchemeDropdown');
    }

    function updateHeatmapWithSelectedColorScheme() {
        if (!currentFilteredData || currentFilteredData.length === 0) {
            console.warn('Ingen filtrerad data tillgänglig.');
            return;
        }

        var heatmapPoints = currentFilteredData.map(d => [parseFloat(d.latitude), parseFloat(d.longitude), parseFloat(d.antalSokande)]);
        var validHeatmapPoints = heatmapPoints.filter(point =>
            !isNaN(point[0]) && !isNaN(point[1]) && point[0] !== 0 && point[1] !== 0
        );

        updateHeatmap(validHeatmapPoints);
    }

    // Fetch för JSON data from controller and display it on the map
    fetch('/GeoData/heatmap-data')
        .then(response => response.json())
        .then(data => {
            console.log('Data från servern:', data);

            if (data && data.coordinates) {
                jsonData = data.coordinates;


                jsonData.forEach(item => {
                    if (!isValidOrt(item.ort)) {
                        item.ort = 'Okänd Ort';
                    }
                });

                var heatmapPoints = jsonData.map(d => [parseFloat(d.latitude), parseFloat(d.longitude), parseFloat(d.antalSokande)]);
                var validHeatmapPoints = heatmapPoints.filter(point =>
                    !isNaN(point[0]) && !isNaN(point[1]) && point[0] !== 0 && point[1] !== 0
                );

                updateHeatmap(validHeatmapPoints);
                populateDropdowns(jsonData);
                populateColorSchemes();
                updateApplicantCount(jsonData.reduce((acc, curr) => acc + curr.antalSokande, 0));

                // Initialize currentFilteredData with all data
                currentFilteredData = jsonData;
            } else {
                console.warn('Ingen giltig data mottagen för heatmapen');
            }
        })
        .catch(error => console.error('Error loading data from controller:', error));

    // Handle the filter button click
    document.getElementById('filter-btn').addEventListener('click', function () {
        if (!ortDropdown || !postnummerDropdown) {
            console.error('Dropdown-menyerna är inte initialiserade.');
            return;
        }

        var selectedOrt = ortDropdown.value;
        var selectedPostnummer = postnummerDropdown.value;

        // Filter data based on dropdown selections
        var filteredData = jsonData.filter(item =>
            (selectedOrt === 'Alla Orter' || item.ort === selectedOrt) &&
            (selectedPostnummer === 'Alla Postnummer' || item.postnummer === selectedPostnummer)
        );

        // Exclude 'Okänd Ort' if 'Alla Orter' is selected
        if (selectedOrt === 'Alla Orter') {
            filteredData = filteredData.filter(item => item.ort !== 'Okänd Ort');
        }

        currentFilteredData = filteredData;

        var heatmapPoints = filteredData.map(d => [parseFloat(d.latitude), parseFloat(d.longitude), parseFloat(d.antalSokande)]);
        var validHeatmapPoints = heatmapPoints.filter(point =>
            !isNaN(point[0]) && !isNaN(point[1]) && point[0] !== 0 && point[1] !== 0
        );

        updateHeatmap(validHeatmapPoints);
        updateApplicantCount(filteredData.reduce((acc, curr) => acc + curr.antalSokande, 0));
    });
</script>

<style>
    input:focus, button:focus, .dropdown-container .dropdown-item input:focus {
        outline: 2px solid #005fcc;
        outline-offset: 2px;
    }

    
    .btn-primary {
        background-color: #FFD500; 
        color: #000000; 
    }

        .btn-primary:hover, .btn-primary:focus {
            background-color: #E6C200; 
        }
</style>