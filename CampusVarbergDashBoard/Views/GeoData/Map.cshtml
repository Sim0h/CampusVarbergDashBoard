@{
    ViewData["Title"] = "Heatmap";
}

<div class="dropdown-container">
    <div class="dropdown-item">
        <input type="text" id="ortDropdown" name="ortDropdown" />
    </div>
    <div class="dropdown-item">
        <input type="text" id="postnummerDropdown" name="postnummerDropdown" />
    </div>
    <div class="button-container">
        <button type="button" class="btn btn-primary" id="filter-btn">Filtrera</button>
    </div>
</div>

<div id="applicant-count" style="margin-top: 10px;">
    Antal sökande: <span id="antal-sokande">0</span>
</div>

<div id="map" style="height: 725px; width: 100%;"></div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://cdn.syncfusion.com/ej2/20.2.36/dist/ej2.min.js"></script>
<script src="https://unpkg.com/leaflet.heat/dist/leaflet-heat.js"></script>

<script>
    var jsonData = []; // För att lagra all JSON-data
    var ortDropdown, postnummerDropdown;

    // Initiera kartan
    var map = L.map('map', {
        center: [61.0, 10.0],
        zoom: 5,
        maxBounds: [[83.0, -10.0], [53.0, 40.0]],
        maxBoundsViscosity: 1.0
    });

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors',
        maxZoom: 18,
        minZoom: 5
    }).addTo(map);

    var heatmapLayer;

    function updateHeatmap(points) {
        if (heatmapLayer) {
            map.removeLayer(heatmapLayer);
        }

        if (points.length > 0) {
            heatmapLayer = L.heatLayer(points, { radius: 30, blur: 20, maxZoom: 10 }).addTo(map);
        } else {
            console.warn('Heatmap-punkter saknas, heatmapen uppdateras inte');
        }
    }

    function updateApplicantCount(count) {
        document.getElementById('antal-sokande').textContent = count;
    }

    function populateDropdowns(data) {
        var orter = [...new Set(data.map(item => item.ort))];
        var postnummer = [...new Set(data.map(item => item.postnummer))];

        // Sortera orter och flytta "Okänd Ort" till slutet
        orter = orter.filter(ort => ort !== 'Okänd Ort');
        orter.sort((a, b) => a.localeCompare(b, 'sv', { sensitivity: 'base' }));
        orter.unshift('Alla Orter');
        orter.push('Okänd Ort');

        // Sortera postnummer och flytta "Okänt Postnummer" till slutet
        postnummer = postnummer.filter(pn => pn !== 'Okänt Postnummer');
        postnummer.sort((a, b) => a.localeCompare(b, 'sv', { numeric: true }));
        postnummer.unshift('Alla Postnummer');
        postnummer.push('Okänt Postnummer');

        if (!ortDropdown) {
            ortDropdown = new ej.dropdowns.DropDownList({
                placeholder: 'Välj Ort',
                dataSource: orter,
                allowFiltering: true,
                popupHeight: '200px',
                change: function () {
                    updatePostnummerDropdown();
                }
            });
            ortDropdown.appendTo('#ortDropdown');
        } else {
            ortDropdown.dataSource = orter;
            ortDropdown.dataBind();
        }

        if (!postnummerDropdown) {
            postnummerDropdown = new ej.dropdowns.DropDownList({
                placeholder: 'Välj Postnummer',
                dataSource: postnummer,
                allowFiltering: true,
                popupHeight: '200px'
            });
            postnummerDropdown.appendTo('#postnummerDropdown');
        } else {
            postnummerDropdown.dataSource = postnummer;
            postnummerDropdown.dataBind();
        }
    }

    function updatePostnummerDropdown() {
        var selectedOrt = ortDropdown.value;

        var filteredPostnummer = jsonData
            .filter(item => selectedOrt === 'Alla Orter' || item.ort === selectedOrt)
            .map(item => item.postnummer);

        filteredPostnummer = [...new Set(filteredPostnummer)];

        // Sortera postnummer och flytta "Okänt Postnummer" till slutet
        filteredPostnummer = filteredPostnummer.filter(pn => pn !== 'Okänt Postnummer');
        filteredPostnummer.sort((a, b) => a.localeCompare(b, 'sv', { numeric: true }));
        filteredPostnummer.unshift('Alla Postnummer');
        filteredPostnummer.push('Okänt Postnummer');

        postnummerDropdown.dataSource = filteredPostnummer;
        postnummerDropdown.value = 'Alla Postnummer';
        postnummerDropdown.dataBind();
    }

    // Hämta all JSON-data från controller och visa den på kartan
    fetch('/GeoData/heatmap-data')
        .then(response => response.json())
        .then(data => {
            console.log('Data från servern:', data); // Logga data för felsökning

            if (data && data.coordinates) {
                jsonData = data.coordinates; // Spara data i jsonData-variabeln

                var heatmapPoints = jsonData.map(d => [parseFloat(d.latitude), parseFloat(d.longitude), parseFloat(d.antalSokande)]);
                var validHeatmapPoints = heatmapPoints.filter(point =>
                    !isNaN(point[0]) && !isNaN(point[1]) && point[0] !== 0 && point[1] !== 0
                );

                updateHeatmap(validHeatmapPoints); // Visa alla data på heatmapen
                populateDropdowns(jsonData); // Fyll dropdown-menyerna
                updateApplicantCount(jsonData.reduce((acc, curr) => acc + curr.antalSokande, 0)); // Uppdatera antalet sökande
            } else {
                console.warn('Ingen giltig data mottagen för heatmapen');
            }
        })
        .catch(error => console.error('Error loading data from controller:', error));

    // Hantera filtreringsknappen
    document.getElementById('filter-btn').addEventListener('click', function () {
        if (!ortDropdown || !postnummerDropdown) {
            console.error('Dropdown-menyerna är inte initialiserade.');
            return;
        }

        var selectedOrt = ortDropdown.value;
        var selectedPostnummer = postnummerDropdown.value;

        // Filtrera data baserat på val i dropdown-menyerna
        var filteredData = jsonData.filter(item =>
            (selectedOrt === 'Alla Orter' || item.ort === selectedOrt) &&
            (selectedPostnummer === 'Alla Postnummer' || item.postnummer === selectedPostnummer)
        );

        var heatmapPoints = filteredData.map(d => [parseFloat(d.latitude), parseFloat(d.longitude), parseFloat(d.antalSokande)]);
        var validHeatmapPoints = heatmapPoints.filter(point =>
            !isNaN(point[0]) && !isNaN(point[1]) && point[0] !== 0 && point[1] !== 0
        );

        updateHeatmap(validHeatmapPoints); // Uppdatera heatmapen med filtrerad data
        updateApplicantCount(filteredData.reduce((acc, curr) => acc + curr.antalSokande, 0)); // Uppdatera antalet sökande
    });
</script>